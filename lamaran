#!/usr/bin/env php

<?php

use app\constant\Config;
use app\cores\Migration;
use app\cores\Seeder;

require_once "vendor/autoload.php";

$config = Config::getConfig();

$commands = [
    "tailwind" => function () {
        execute("tailwind.exe -i public/css/input.css -o public/css/output.css --watch");
    },
    "listen" => function () {
        execute("php -S localhost:5173");
    },
    "migration" => [
        "up" => function () use ($config) {
            $migration = new Migration($config);
            $migration->migrate();
        },
        "down" => function () use ($config) {
            $migration = new Migration($config);
            $migration->rollback();
        }
    ],
    "seed" => [
        "create" => function () use ($config) {
            $seeder = new Seeder($config);
            $seeder->create();
        },
        "delete" => function () use ($config) {
            $seeder = new Seeder($config);
            $seeder->delete();
        }
    ]
];

function execute($command): void
{
    exec($command, $output, $status);

    if ($status !== 0) {
        echo "Error executing command: $command\n";
    }
}

// Run commands
if (!isset($argv[1])) {
    printf("Invalid Command\n");
    die(0);
}

$args = explode(":", $argv[1]);

if (!isset($args[0]) || !array_key_exists($args[0], $commands)) {
    printf("Command not found\n");
    die(0);
}

if (is_callable($commands[$args[0]])) {
    $commands[$args[0]]();
    return;
}

if (isset($args[1]) && is_array($commands[$args[0]]) && array_key_exists($args[1], $commands[$args[0]])) {
    $commands[$args[0]][$args[1]]();
    return;
}

printf("Subcommand not found\n");
die(0);
